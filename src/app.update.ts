import {
  Ctx,
  Hears,
  InjectBot,
  Message,
  On,
  Start,
  Update,
} from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { actionButtons } from './app.buttons';
import { AppService } from './app.service';
import { showList } from './app.utils';
import { Context } from './context.interface';

const todos = [
  {
    id: 1,
    name: '–ö—É–ø–∏—Ç—å',
    isCompleted: false,
  },
  {
    id: 2,
    name: '–ø–æ–º—ã—Ç—å',
    isCompleted: false,
  },
  {
    id: 3,
    name: '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å',
    isCompleted: true,
  },
];

@Update()
export class AppUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly appService: AppService,
  ) {}

  @Start()
  async startCommand(ctx: Context) {
    await ctx.reply('Hi! Friend');
    await ctx.reply('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', actionButtons());
  }

  @Hears('C–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üìã')
  async listTask(ctx: Context) {
    await ctx.deleteMessage();
    await ctx.reply(showList(todos));
  }

  @Hears('–ó–∞–≤–µ—Ä—à–∏—Ç—å  üíö')
  async doneTask(ctx: Context) {
    ctx.session.type = 'done';
    await ctx.deleteMessage();
    await ctx.reply('–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞—á–∏:');
  }
  @Hears('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å üñäÔ∏è')
  async editTask(ctx: Context) {
    ctx.session.type = 'edit';
    await ctx.deleteMessage();
    await ctx.replyWithHTML(
      '–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞—á–∏ –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: \n\n' +
        '–í —Ñ–æ—Ä–º–∞—Ç–µ - <b>1 | –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>',
    );
  }
  @Hears('–£–¥–∞–ª–∏—Ç—å ‚ùå')
  async removeTask(ctx: Context) {
    ctx.session.type = 'remove';
    await ctx.deleteMessage();
    await ctx.reply('–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞—á–∏:');
  }

  @On('text')
  async getMessege(@Message('text') message: string, @Ctx() ctx: Context) {
    if (!ctx.session.type) return;

    //–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    if (ctx.session.type === 'done') {
      const todo = todos.find((t) => t.id === Number(message));

      if (!todo) {
        await ctx.deleteMessage();
        await ctx.reply('–¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        return;
      }

      todo.isCompleted = !todo.isCompleted;
      await ctx.reply(showList(todos));
    }

    //–ò–∑–º–µ–Ω–µ–Ω–∏–µ
    if (ctx.session.type === 'edit') {
      const [taskId, taskName] = message.split(' | ');
      const todo = todos.find((t) => t.id === Number(taskId));

      if (!todo) {
        await ctx.deleteMessage();
        await ctx.reply('–¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        return;
      }

      todo.name = taskName;
      await ctx.reply(showList(todos));
    }

    //–£–¥–∞–ª–µ–Ω–∏–µ
    if (ctx.session.type === 'remove') {
      const todo = todos.find((t) => t.id === Number(message));
      if (!todo) {
        await ctx.deleteMessage();
        await ctx.reply('–¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        return;
      }

      await ctx.reply(showList(todos.filter((t) => t.id !== Number(message))));
    }
  }
}
